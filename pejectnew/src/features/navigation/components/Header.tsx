import React, { useState } from 'react';
import styles from '../styles/Header.module.css'; // To be created
// import Menu from './Menu'; // Will be created and imported later

// SVG for the star icon, can be moved to a separate SVG component later
const BriefStarIcon = () => (
  <svg id="brief-star" width="1.25em" height="1.25em" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M11.5741 8.14577C11.578 6.31677 11.578 4.48781 11.5741 2.6588C11.476 2.66862 11.3776 2.6775 11.2789 2.68638C10.8125 2.7284 10.3429 2.7707 9.89837 2.91479C9.62533 3.11406 9.43886 3.38464 9.2548 3.65174C9.22215 3.69912 9.18938 3.74667 9.15641 3.79342C8.46095 4.84078 7.92637 5.97153 7.49437 7.12945C8.78455 7.66865 10.1542 8.06237 11.5741 8.14577Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M15.8183 7.38435C15.4091 7.5367 15.0004 7.68889 14.5712 7.78766C13.8719 7.96416 13.1551 8.07855 12.4344 8.14062C12.4306 6.30968 12.4286 4.47683 12.4344 2.64589C12.7859 2.67076 13.1337 2.72531 13.4818 2.7799C13.7037 2.81469 13.9257 2.84951 14.1489 2.87668C15.1485 4.18006 16.0008 5.60953 16.4502 7.1573C16.2376 7.22825 16.0279 7.30632 15.8183 7.38435Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M7.85778 4.50678C7.93159 4.36117 8.01836 4.22136 8.10509 4.08162C8.24825 3.85095 8.39129 3.62046 8.47574 3.3644C7.11001 3.82795 5.98258 4.74537 5.04885 5.75006C5.61064 6.15155 6.19565 6.5278 6.82136 6.83619C7.04719 6.02068 7.45188 5.26485 7.85338 4.515L7.85778 4.50678Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M18.5808 6.00237C18.1229 6.2953 17.6655 6.588 17.1776 6.83619L17.1078 6.65537C16.845 5.97366 16.5808 5.28837 16.2071 4.65224C16.1292 4.49689 16.0377 4.34731 15.9464 4.19781C15.7833 3.93108 15.6205 3.66464 15.5348 3.36634C16.4783 3.69412 17.288 4.26823 18.0454 4.86755C18.3825 5.13327 18.6499 5.46301 18.9036 5.79661C18.7957 5.86483 18.6882 5.93361 18.5808 6.00237Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M6.51524 7.7302C6.58111 7.53819 6.36413 7.42375 6.21303 7.34423C5.62994 7.04942 5.07203 6.71581 4.52187 6.37251C3.74893 7.48194 3.18519 8.70967 2.91205 10.0034C2.86434 10.3189 2.82723 10.6369 2.79014 10.9547C2.77002 11.1271 2.74987 11.2997 2.72807 11.4716C3.81677 11.4736 4.90545 11.4736 5.99415 11.4716C5.98447 10.209 6.23823 8.96376 6.51524 7.7302Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M18.016 11.4726C17.9812 10.1459 17.7584 8.83479 17.4349 7.54305C17.9191 7.30394 18.377 7.02844 18.8353 6.75268C19.0462 6.62581 19.2572 6.49889 19.4708 6.37543C20.5266 7.8941 21.2065 9.65329 21.1988 11.4707C20.1372 11.4745 19.0757 11.4745 18.016 11.4726Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M8.81364 8.42613C8.53122 8.34929 8.25799 8.24864 7.98452 8.14791C7.74029 8.05794 7.49581 7.96789 7.2445 7.89469C6.95779 9.06812 6.79121 10.2687 6.77959 11.4712C8.37777 11.4732 9.9778 11.4732 11.5779 11.4712L11.5779 11.3078C11.5781 10.4994 11.5782 9.69256 11.5528 8.88578C10.6307 8.7888 9.71056 8.65693 8.81364 8.42613Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M15.8143 8.21898C16.1107 8.10842 16.4051 7.99978 16.7073 7.90475C17.0511 8.93904 17.0945 10.0248 17.1375 11.099C17.1424 11.2232 17.1474 11.3478 17.1528 11.4716C15.5779 11.4736 14.0049 11.4736 12.43 11.4716C12.43 10.6066 12.43 9.73957 12.4338 8.87452L12.678 8.84739C13.7415 8.72973 14.8247 8.6099 15.8143 8.21898Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M5.97359 12.4732C4.89651 12.4441 3.81945 12.4538 2.74431 12.4829C2.77056 12.6868 2.79187 12.8914 2.8132 13.0962C2.8501 13.4505 2.88705 13.8052 2.94966 14.1567C3.25574 15.3845 3.79428 16.5618 4.55172 17.613C5.20649 17.1902 5.87475 16.7848 6.55276 16.395C6.25056 15.1052 5.94647 13.8018 5.97359 12.4732Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M11.5758 12.5182C11.5758 13.3636 11.5758 14.2073 11.5739 15.0529C10.059 15.0916 8.63513 15.5862 7.24422 16.0905C6.93621 14.9132 6.85287 13.701 6.77345 12.4985C7.93037 12.4438 9.08831 12.4499 10.2458 12.456C10.6889 12.4584 11.1328 12.4607 11.5758 12.4596V12.5182Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M12.4346 15.0602C13.9224 15.1087 15.3327 15.5742 16.6965 16.0882C17.0936 14.9147 17.142 13.6772 17.1517 12.4573C15.5787 12.4553 14.0038 12.4553 12.4308 12.4573C12.4308 13.3242 12.4308 14.1932 12.4346 15.0602Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M17.4493 16.4241C17.7399 15.1168 17.9511 13.794 18.0112 12.4577C18.3634 12.4596 18.7159 12.4585 19.0684 12.4575C19.7744 12.4553 20.4816 12.4532 21.1882 12.4751C21.2463 14.3061 20.5044 16.0769 19.468 17.613C19.1853 17.4534 18.9093 17.2834 18.6332 17.1133C18.2452 16.8742 17.8568 16.6349 17.4493 16.4241Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M7.47913 16.802C7.96536 18.1655 8.64724 19.4669 9.49379 20.6714L9.52379 20.7129C9.63511 20.8675 9.75606 21.0355 9.95681 21.0942C10.4779 21.2494 11.0301 21.3056 11.5725 21.3483C11.5764 19.5193 11.5764 17.6903 11.5725 15.8613C10.1603 15.9544 8.77317 16.2744 7.47913 16.802Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M12.4336 21.3372C12.4278 19.5082 12.4298 17.6792 12.4336 15.8502C13.8207 15.9511 15.1942 16.273 16.4631 16.8025C16.0369 18.2436 15.262 19.5722 14.3806 20.8194C14.2702 20.959 14.1384 21.1045 13.9233 21.1025C13.5281 21.2185 13.116 21.2629 12.705 21.3072C12.6145 21.3169 12.5239 21.3267 12.4336 21.3372Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M6.83004 17.1678C6.19464 17.449 5.59794 17.7981 5.0439 18.1958C5.92532 19.2509 7.11287 20.0694 8.4321 20.6124C8.37976 20.3334 8.22932 20.0865 8.07955 19.8407C8.02421 19.7499 7.96894 19.6591 7.91876 19.567C7.48289 18.799 7.1148 17.996 6.83004 17.1678Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path d="M17.6195 17.395C18.0164 17.5963 18.4156 17.7987 18.7542 18.0741L18.7329 18.4523C17.8476 19.3639 16.7666 20.1339 15.5307 20.6033C15.6231 20.3368 15.7681 20.0926 15.9126 19.8491C15.9437 19.7967 15.9748 19.7443 16.0053 19.6917C16.4644 18.879 16.85 18.0314 17.1793 17.1664C17.3235 17.2449 17.4714 17.3199 17.6195 17.395Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
    <path fillRule="evenodd" clipRule="evenodd" d="M23.9529 10.9915C23.8754 10.3766 23.7804 9.76178 23.6603 9.15082C23.0443 6.55181 21.4906 4.13897 19.2687 2.43022C18.1819 1.66797 17.0235 0.940637 15.6965 0.585698C14.4315 0.186149 13.0968 -0.0621051 11.7524 0.0135377C9.35417 0.0484497 6.98883 0.818467 5.09038 2.16064C2.23496 4.1739 0.410092 7.33342 0.0710831 10.6171C-0.252428 13.6622 0.522472 16.8683 2.51584 19.349C4.29225 21.7075 7.12444 23.3503 10.1871 23.8643C13.8078 24.4326 17.6434 23.1816 20.1753 20.761C22.9261 18.2337 24.2764 14.537 23.9529 10.9915ZM22.5697 12.3938C22.4418 15.241 21.0994 18.034 18.8522 20.0026C18.0793 20.5981 17.2696 21.1702 16.3649 21.5872L16.2757 21.6207C15.1576 22.0409 14.0192 22.4686 12.7926 22.4988C9.8229 22.751 6.80669 21.6163 4.75714 19.6496C2.03151 17.0681 0.826569 13.187 1.69831 9.67643C2.17486 7.41685 3.51155 5.32986 5.36157 3.78791C6.16357 3.1401 7.09537 2.63775 8.04072 2.18972C9.19529 1.75526 10.4351 1.50505 11.6807 1.4585C13.091 1.3848 14.4858 1.68543 15.7973 2.13734C17.4942 2.84916 19.0343 3.91012 20.1385 5.30466C21.8433 7.3024 22.6065 9.88009 22.5697 12.3938Z" fill="currentColor" shapeRendering="geometricPrecision"></path>
  </svg>
);

interface HeaderProps {
  onMenuToggle: () => void; // Callback to toggle menu visibility in App.tsx
  isMenuOpen: boolean;
}

const Header: React.FC<HeaderProps> = ({ onMenuToggle, isMenuOpen }) => {
  // GSAP animations for hover effects or header reveal/hide can be added here later
  // For now, it's a static structure.

  return (
    <header className={styles.appHeader}>
      <nav className={styles.appNav}>
        <div className={`${styles.briefLinkContainer} ${styles.animatedLink}`}>
          <BriefStarIcon />
          <a
            id="brief-button"
            href="/brief/" // Assuming /brief/ will be a page or handled by routing
            target="_blank"
            rel="noopener noreferrer"
            className={styles.animatedLinkInner}
          >
            <span>FILL OUT BRIEF</span>
          </a>
        </div>
        {/* <a id="lang-pick" className={styles.animatedLink}><span>DEUTSCH</span></a> */}
        <div className={styles.navEnd}>
          <button
            id="menu-button"
            onClick={onMenuToggle}
            className={`${styles.animatedLink} ${styles.menuButton}`}
            aria-expanded={isMenuOpen}
            aria-controls="menu-section" // Assuming menu section will have this ID
          >
            <span id="menu-button-text">{isMenuOpen ? 'CLOSE MENU' : 'OPEN MENU'}</span>
          </button>
        </div>
      </nav>
      {/* The <Menu /> component will be conditionally rendered in App.tsx based on isMenuOpen */}
    </header>
  );
};

export default Header;
